# -*- coding: utf-8 -*-
"""SBERT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IOpn1oVYS5oEnxoFh-lQb2ha2pDL7nD-
"""

# Install & Imports
!pip install sentence-transformers

import re
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer

# Load Sentence-BERT model
sbert_model = SentenceTransformer("all-MiniLM-L6-v2")
print("‚úÖ SBERT model loaded")

# Load Dataset
df = pd.read_csv("Dummy_Lawyers.csv")

def create_summary(row):
    return (
        f"{row['Name']} is a lawyer specializing in {row['Domain']} with "
        f"{row['Years of active experience']} years of experience. "
        f"Charges approximately ‚Çπ{row['Price']:.0f} and has a client satisfaction rating of "
        f"{row['Client satisfaction (out of 10)']}/10."
    )

df["summary_text"] = df.apply(create_summary, axis=1)

print("‚úÖ Dataset loaded with", len(df), "lawyers")

# Precompute Embeddings
print("‚è≥ Generating SBERT embeddings...")
df["embedding"] = df["summary_text"].apply(lambda x: sbert_model.encode(x))
print("‚úÖ Embeddings generated")

def recommend(query):
    filtered_df = df.copy()
    query_lower = query.lower()

    # --- Experience filter ---
    exp_match = re.search(r"(less|more) than (\d+)\s*years?", query_lower)
    if exp_match:
        op, val = exp_match.groups()
        val = int(val)
        if op == "less":
            filtered_df = filtered_df[filtered_df["Years of active experience"] < val]
        else:
            filtered_df = filtered_df[filtered_df["Years of active experience"] > val]

    # --- Budget filter ---
    budget_match = re.search(r"(?:budget of|under|below)\s*‚Çπ?(\d+)", query_lower)
    if budget_match:
        budget = int(budget_match.group(1))
        filtered_df = filtered_df[filtered_df["Price"] <= budget]

    # --- Domain filter ---
    for domain in df["Domain"].unique():
        if domain.lower() in query_lower:
            filtered_df = filtered_df[filtered_df["Domain"].str.lower() == domain.lower()]
            break

    if filtered_df.empty:
        print("‚ö†Ô∏è No lawyers match your query after filtering.")
        return

    # --- Embedding similarity ---
    query_embedding = sbert_model.encode(query)
    lawyer_embeddings = list(filtered_df["embedding"])
    sim_scores = cosine_similarity([query_embedding], lawyer_embeddings)[0]

    filtered_df["Similarity Score"] = sim_scores
    filtered_df = filtered_df.sort_values(by="Similarity Score", ascending=False)

    result = filtered_df[[
        "Name", "Domain", "Years of active experience", "Price",
        "Client satisfaction (out of 10)", "Similarity Score"
    ]].rename(columns={
        "Years of active experience": "Experience (yrs)",
        "Price": "Estimated Price (‚Çπ)",
        "Client satisfaction (out of 10)": "Satisfaction (/10)"
    })

    print(f"\nüìã Lawyers matching query: \"{query}\"")
    print(result.to_string(index=False))
    return result

recommend("give me names of lawyers who have less than 15 years of experience in civil law for budget of 20000rs")
recommend("criminal law lawyer with more than 10 years of experience under 50000")
recommend("family law expert under 25000 with at least 5 years experience")
recommend("property lawyer more than 20 years of experience")